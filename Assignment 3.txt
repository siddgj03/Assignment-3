/**
* Finish assignments, try bonus. Deadline: Before the next class.
* 
* @author Jia
*/

// assignments
/**
* Write a method to find N numbers which are power of three. e.g. n=4,
* return {1,3,9,27}
*/

import java.util.Scanner;

public class Multiple {
          
	  public static void calculate(int n){
		
		  int num =1;
		  for (int i=0; i<n; i++){
		 
			  System.out.println(num);
			  num = num*3;
		  }
	  }
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		  System.out.println("Enter the number for multiple of 3 :-");
		  int count = scan.nextInt();
		    calculate(count);
		}
}

-----------------------------------------------------------------------------------------------------------------------	
/**
* Given a integer 'n', return n%count, count is the number of digits of n
* For example, n = 100, return 1
*/

import java.util.Scanner;
 
public class NumberOfDigits {
	
	public static void main(String[] args) {
		int num, count=0,x,y;
		Scanner sc = new Scanner(System.in);		
		System.out.println("\n Please Enter any Number: ");
		num = sc.nextInt();
		y= num;
		while(num > 0) {
			num = num / 10;
			count = count + 1; 
		}
		x = y%count;
		System.out.println("\n Value is = "+x);
		
	}
}

-------------------------------------------------------------------------------------------------------------------------------------	
/**
* Given a integer 'n', if n is odd, print n odd numbers, if n is even,
* print n even numbers. For example, n = 3, print 1 3 5 n = 4, print 0 2 4 6
*/	
package org.prime;
import java.util.Scanner;

public class printNumbers {
           
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		System.out.println("Enter the number :-");
		int num = scan.nextInt();
		int number=0;
		if (num%2 !=0)
		number =1;
			for(int i=0;i<num;i++)
		{
			System.out.println("" +number);
                        number = number +2; 				
		}
	}
}

------------------------------------------------------------------------------------------------------
/**
* Given numRows, generate the first numRows of Pascal's triangle. For
* example, given numRows = 5, return: [1] [1,1] [1,2,1] [1,3,3,1]
* [1,4,6,4,1]
*/
package org.prime;

import java.util.Scanner;

public class PascalTriangle {
      public static void main(String[] args) {
       	Scanner point = new Scanner(System.in);
    	System.out.println(" Enter the number :-");
        int row = point.nextInt();
        for(int i =0;i<row;i++) {
        int num = 1;
        System.out.format("%"+(row-i)*2+"s","");
        for(int j=0;j<=i;j++) {
        System.out.format("%4d",num);
        num = num * (i - j) / (j + 1);
        }
        System.out.println();
        } 
        }
}
---------------------------------------------------------------------------------------------------	
/**
* Write a function that takes a string as input and reverse only the vowels
* of a string. For example: Given s = "hello", return "holle".
*/
package org.prime;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class ReverseVowels {
	public static void main(String args[]){
		Scanner in = new Scanner(System.in);
		ReverseVowels rev = new ReverseVowels();
		System.out.println("Enter the string :-");
		String insert = in.next();
		String res = rev.reverseVowels(insert);
		System.out.println("The string after reversing the vowels :-" +res);		
	}
	public String reverseVowels(String insert){
		ArrayList vowel = new ArrayList();
		char[] arr = insert.toCharArray();
		int sizeOfarr = insert.length();
		for(int i=0 ; i< sizeOfarr; i++){
			if(arr[i] == 'a'|| arr[i] == 'e' || arr[i] == 'i'||arr[i] == 'o'||arr[i] == 'u'){
				vowel.add(i);				
			}	
		}
		int sizeOfVowels = vowel.size();
		for(int j=0 ; j< sizeOfVowels/2; j++){
			int k = sizeOfVowels - 1 - j;
			int incIndex = (int)vowel.get(j);
			int decIndex = (int)vowel.get(k);			
			char temp = arr[incIndex];
			arr[incIndex] = arr[decIndex];
			arr[decIndex] = temp;
		}
		return Arrays.toString(arr);	
	}
}
---------------------------------------------------------------------------------------------------------------------------------------	
/**
* Given a string s consists of upper/lower-case alphabets and empty space
* characters ' ', return the length of last word in the string. If the last
* word does not exist, return 0. Note: A word is defined as a character
* sequence consists of non-space characters only.
*/

import java.util.Scanner;

public class lastWord {

	public static void main(String[] args) {
	  		  Scanner scan = new Scanner(System.in);
			  System.out.println("Enter the string :-");
			  String s= scan.nextLine();
			  char[] arr = s.toCharArray();

			  int count = 0;
			  for (int i = s.length() -1; arr[i] != ' '; i--) {
			  count++;
			  }
			  System.out.println("The last word count is :-" +count);
	          }

}	
---------------------------------------------------------------------------------------------------------------------------------------
/**
* Reverse a string by words. Do not use 'split' function. e.g. "I like
* soccer" --> "soccer like I"
*/
import java.util.Scanner;
public class reverseWords {
	public static void main(String[] args) {  
			  String str_arr[] = new String[20];
			  Scanner scan = new Scanner(System.in);
			  System.out.println("Enter the string :-");
			  String s= scan.nextLine();
			  int k=s.length(),j=0;
			  for(int i=s.length()-1;i>=0;i--){
			   if(s.charAt(i)==' '){
			    str_arr[j++]=s.substring(i+1, k);
			    k=i;
			   } 
			  }
			  str_arr[j++]=s.substring(0, k);
			  for(int i=0;i<j;i++) 
			  System.out.print(str_arr[i]+" ");
              scan.close();
	}
}	

----------------------------------------------------------------------------------------------------------------------------------------
	// Bonus
	/**
	* A robot from Mars send a long message to Earth which only contains many
	* "SOS", like "SOSSOS", "SOSSOSSOSSOSSOS" But the radiation from universe
	* changed some characters of the massage. Write a method to count how many
	* characters were changed. For example, "SOSSOSSOS" might be changed to
	* "SOSSUSSOP", then your method should return 2. The message was consisted
	* by "SOS" so its length will be multiple of 3. You could assume the
	* message only contains upper letter.
	*/
	public int checkMessage(String message) {
	return -1;
	}
	}

